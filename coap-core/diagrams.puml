@startuml
title: Message handling model

box "OS"
    entity Socket as sock
end box
participant DatagramSocketTransport as udp <<(C,#ADD1B2)>>
participant Executor as exec <<(I,#ADD1B2)>>
participant CoapDispatcher as server <<(C,#ADD1B2)>>
participant InboundService as inbound <<(C,#ADD1B2)>>


loop
udp -> sock++ #LightGreen: socket.receive
--> sock: Datagram
udp <-- sock--
udp -> exec: execute
end

group Executor's thread
exec -> udp++ #LightBlue: run
    udp -> udp: CoapPacket.read
    note left: parse to CoapPacket

    udp -> server++: handle(coapPacket)
        server -> inbound++
        inbound --> server--:
    server -> udp--: sendPacket

    udp -> udp: coapPacket.writeTo
    note left: serialize CoapPacket
    udp -> sock: socket.send

exec <-- udp--
end


@enduml

@startuml
Title: Chain of message flow
skinparam componentStyle rectangle

component "Dispatcher" as disp
interface "Transport" as trans
component "PiggybackedExchange"

frame "Outbound service" {
    component "TimeoutFilter" as outTimeout
    component "toCoapPacket" as outToCoapPacket
    component "RetransmissionFilter" as outRetr

    [ObserveRequest] --> [CongestionControl]
    [CongestionControl] --> [BlockWiseOutgoing]
    [BlockWiseOutgoing] --> outTimeout
    outTimeout --> outToCoapPacket
    outToCoapPacket --> [UpdateMID]
    [UpdateMID] --> [ExchangeFilter]
    [ExchangeFilter] --> outRetr
    outRetr --> [PiggybackedExchange]
    [PiggybackedExchange] --> trans: sendPacket()

    [ExchangeFilter] <. disp: separate\nresponse
    [PiggybackedExchange] <. disp: piggybacked\nresponse
}

frame "Outbound observations" {
    [RetransmissionFilter] -left--> [PiggybackedExchange]
    [RetransmissionFilter] <-- [toCoapPacket]
    [toCoapPacket] <-- [TimeoutFilter]
    [TimeoutFilter] <-- [BlockWiseNotification]
    [BlockWiseNotification] <-- [NotificationValidator]
}

frame "Inbound" {
    disp -down..> [DuplicateFilter]: request
    [DuplicateFilter] --> [toCoapRequest]
    [toCoapRequest] --> [CatchExceptions]
    [CatchExceptions] --> [CriticalOptionVerifier]
    [CriticalOptionVerifier] --> [ObservationSender]
    [ObservationSender] --> [BlockWiseIncoming]

    [ObservationSender] -right.> [NotificationValidator]: send next\nobservation
}

send --> [ObserveRequest]: CoapRequest
[BlockWiseIncoming] --> [RouterService]
disp <-- trans

@enduml